"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClaimFromRewardingFundMethod = exports.ExecutionMethod = exports.TransferMethod = exports.AbstractMethod = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _envelop = require("./envelop");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AbstractMethod {
  constructor(client, account, opts) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "account", void 0);

    _defineProperty(this, "signer", void 0);

    this.client = client;
    this.account = account;
    this.signer = opts && opts.signer;
  }

  async baseEnvelop(gasLimit, gasPrice) {
    let nonce = "";

    if (this.account && this.account.address) {
      const meta = await this.client.getAccount({
        address: this.account.address
      });
      nonce = String(meta.accountMeta && meta.accountMeta.pendingNonce || "");
    }

    return new _envelop.Envelop(1, nonce, gasLimit, gasPrice);
  }

  async signAction(envelop) {
    if (!envelop.gasPrice) {
      const price = await this.client.suggestGasPrice({});
      envelop.gasPrice = String(price.gasPrice);
    }

    if (!envelop.gasLimit) {
      const limit = await this.client.estimateActionGasConsumption({
        transfer: envelop.transfer,
        execution: envelop.execution,
        callerAddress: this.account.address
      });
      envelop.gasLimit = limit.gas.toString();
    }

    if (this.account && this.account.address) {
      const meta = await this.client.getAccount({
        address: this.account.address
      });

      if (meta.accountMeta && meta.accountMeta.balance) {
        const gasPrice = new _bignumber.default(envelop.gasPrice);
        const gasLimit = new _bignumber.default(envelop.gasLimit);
        const balance = new _bignumber.default(meta.accountMeta.balance);

        if (envelop.transfer) {
          const amount = new _bignumber.default(envelop.transfer.amount);

          if (balance.comparedTo(amount.plus(gasPrice.multipliedBy(gasLimit))) < 0) {
            throw new _types.ActionError(_types.ActionErrorCode.ErrBalance, "Insufficient funds for gas * price + amount");
          }
        }

        if (envelop.execution) {
          const amount = new _bignumber.default(envelop.execution.amount);

          if (balance.comparedTo(amount.plus(gasPrice.multipliedBy(gasLimit))) < 0) {
            throw new _types.ActionError(_types.ActionErrorCode.ErrBalance, "Insufficient funds for gas * price + amount");
          }
        }
      }
    }

    return _envelop.SealedEnvelop.sign(this.account.privateKey, this.account.publicKey, envelop);
  }

  async sendAction(envelop) {
    const opts = {
      address: ""
    };

    if (this.account && this.account.address) {
      opts.address = this.account.address;
    }

    if (this.signer && this.signer.signAndSend) {
      return this.signer.signAndSend(envelop, opts);
    }

    let selp;

    if (this.signer && this.signer.signOnly) {
      selp = await this.signer.signOnly(envelop, opts);
    } else {
      selp = await this.signAction(envelop);
    }

    try {
      await this.client.sendAction({
        action: selp.action()
      });
    } catch (e) {
      let code = _types.ActionErrorCode.ErrUnknown;
      let message = `send action error: ${JSON.stringify(e)}`;

      if (e.details) {
        message = e.details;

        if (e.details.match(/^reject existed action .*/)) {
          code = _types.ActionErrorCode.ErrExistedAction;
        } else if (e.details.match(/^insufficient balance .*/)) {
          code = _types.ActionErrorCode.ErrBalance;
        } else if (e.details.match(/.* lower than minimal gas price threshold$/)) {
          code = _types.ActionErrorCode.ErrGasPrice;
        } else if (e.details === "action source address is blacklisted") {
          code = _types.ActionErrorCode.ErrAddress;
        } else if (e.details.indexOf("nonce") >= 0) {
          code = _types.ActionErrorCode.ErrNonce;
        }
      }

      throw new _types.ActionError(code, message);
    }

    return selp.hash();
  }

}

exports.AbstractMethod = AbstractMethod;

class TransferMethod extends AbstractMethod {
  constructor(client, account, transfer, opts) {
    super(client, account, opts);

    _defineProperty(this, "transfer", void 0);

    this.transfer = transfer;
  }

  async execute() {
    const envelop = await this.baseEnvelop(this.transfer.gasLimit, this.transfer.gasPrice);
    envelop.transfer = {
      amount: this.transfer.amount,
      recipient: this.transfer.recipient,
      payload: Buffer.from(this.transfer.payload, "hex")
    };
    return this.sendAction(envelop);
  }

}

exports.TransferMethod = TransferMethod;

class ExecutionMethod extends AbstractMethod {
  constructor(client, account, execution, opts) {
    super(client, account, opts);

    _defineProperty(this, "execution", void 0);

    this.execution = execution;
  }

  async execute() {
    const envelop = await this.baseEnvelop(this.execution.gasLimit, this.execution.gasPrice);
    envelop.execution = {
      amount: this.execution.amount,
      contract: this.execution.contract,
      data: this.execution.data
    };
    return this.sendAction(envelop);
  }

  async sign() {
    const envelop = await this.baseEnvelop(this.execution.gasLimit, this.execution.gasPrice);
    envelop.execution = {
      amount: this.execution.amount,
      contract: this.execution.contract,
      data: this.execution.data
    };
    const selp = await this.signAction(envelop);
    return selp.action();
  }

}

exports.ExecutionMethod = ExecutionMethod;

class ClaimFromRewardingFundMethod extends AbstractMethod {
  constructor(client, account, claim, opts) {
    super(client, account, opts);

    _defineProperty(this, "claimFronRewardFund", void 0);

    this.claimFronRewardFund = claim;
  }

  async execute() {
    const envelop = await this.baseEnvelop(this.claimFronRewardFund.gasLimit, this.claimFronRewardFund.gasPrice);
    envelop.claimFromRewardingFund = {
      amount: this.claimFronRewardFund.amount,
      data: this.claimFronRewardFund.data
    };
    return this.sendAction(envelop);
  }

  async sign() {
    const envelop = await this.baseEnvelop(this.claimFronRewardFund.gasLimit, this.claimFronRewardFund.gasPrice);
    envelop.claimFromRewardingFund = {
      amount: this.claimFronRewardFund.amount,
      data: this.claimFronRewardFund.data
    };
    const selp = await this.signAction(envelop);
    return selp.action();
  }

}

exports.ClaimFromRewardingFundMethod = ClaimFromRewardingFundMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,