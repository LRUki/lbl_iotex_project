"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SealedEnvelop = exports.Envelop = void 0;

var _action_pb = _interopRequireDefault(require("../../protogen/proto/types/action_pb"));

var _crypto = require("../crypto/crypto");

var _hash = require("../crypto/hash");

var _types = require("../rpc-method/types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Envelop {
  // optional fields
  constructor(version, nonce, gasLimit, gasPrice) {
    _defineProperty(this, "version", void 0);

    _defineProperty(this, "nonce", void 0);

    _defineProperty(this, "gasLimit", void 0);

    _defineProperty(this, "gasPrice", void 0);

    _defineProperty(this, "transfer", void 0);

    _defineProperty(this, "execution", void 0);

    _defineProperty(this, "startSubChain", void 0);

    _defineProperty(this, "stopSubChain", void 0);

    _defineProperty(this, "putBlock", void 0);

    _defineProperty(this, "createDeposit", void 0);

    _defineProperty(this, "settleDeposit", void 0);

    _defineProperty(this, "createPlumChain", void 0);

    _defineProperty(this, "terminatePlumChain", void 0);

    _defineProperty(this, "plumPutBlock", void 0);

    _defineProperty(this, "plumCreateDeposit", void 0);

    _defineProperty(this, "plumStartExit", void 0);

    _defineProperty(this, "plumChallengeExit", void 0);

    _defineProperty(this, "plumResponseChallengeExit", void 0);

    _defineProperty(this, "plumFinalizeExit", void 0);

    _defineProperty(this, "plumSettleDeposit", void 0);

    _defineProperty(this, "plumTransfer", void 0);

    _defineProperty(this, "depositToRewardingFund", void 0);

    _defineProperty(this, "claimFromRewardingFund", void 0);

    _defineProperty(this, "grantReward", void 0);

    _defineProperty(this, "putPollResult", void 0);

    this.version = version;
    this.nonce = nonce;
    this.gasLimit = gasLimit;
    this.gasPrice = gasPrice;
  } // tslint:disable-next-line:cyclomatic-complexity


  core() {
    const gasLimit = this.gasLimit || "0";
    const gasPrice = this.gasPrice || "0";
    const pbActionCore = new _action_pb.default.ActionCore();
    pbActionCore.setVersion(this.version);
    pbActionCore.setNonce(Number(this.nonce));
    pbActionCore.setGaslimit(Number(gasLimit));
    pbActionCore.setGasprice(gasPrice); // oneof action

    if (this.transfer) {
      pbActionCore.setTransfer((0, _types.toActionTransfer)(this.transfer));
    } else if (this.execution) {
      pbActionCore.setExecution((0, _types.toActionExecution)(this.execution));
    } else if (this.startSubChain) {
      pbActionCore.setStartsubchain((0, _types.toActionStartSubChain)(this.startSubChain));
    } else if (this.stopSubChain) {
      pbActionCore.setStopsubchain((0, _types.toActionStopSubChain)(this.stopSubChain));
    } else if (this.putBlock) {
      pbActionCore.setPutblock((0, _types.toActionPutBlock)(this.putBlock));
    } else if (this.createDeposit) {
      pbActionCore.setCreatedeposit((0, _types.toActionCreateDeposit)(this.createDeposit));
    } else if (this.settleDeposit) {
      pbActionCore.setSettledeposit((0, _types.toActionSettleDeposit)(this.settleDeposit));
    } else if (this.createPlumChain) {
      pbActionCore.setCreateplumchain((0, _types.toActionCreatePlumChain)(this.createPlumChain));
    } else if (this.terminatePlumChain) {
      pbActionCore.setTerminateplumchain((0, _types.toActionTerminatePlumChain)(this.terminatePlumChain));
    } else if (this.plumPutBlock) {
      pbActionCore.setPlumputblock((0, _types.toActionPlumPutBlock)(this.plumPutBlock));
    } else if (this.plumCreateDeposit) {
      pbActionCore.setPlumcreatedeposit((0, _types.toActionPlumCreateDeposit)(this.plumCreateDeposit));
    } else if (this.plumStartExit) {
      pbActionCore.setPlumstartexit((0, _types.toActionPlumStartExit)(this.plumStartExit));
    } else if (this.plumChallengeExit) {
      pbActionCore.setPlumchallengeexit((0, _types.toActionPlumChallengeExit)(this.plumChallengeExit));
    } else if (this.plumResponseChallengeExit) {
      pbActionCore.setPlumresponsechallengeexit((0, _types.toActionPlumResponseChallengeExit)(this.plumResponseChallengeExit));
    } else if (this.plumFinalizeExit) {
      pbActionCore.setPlumfinalizeexit((0, _types.toActionPlumFinalizeExit)(this.plumFinalizeExit));
    } else if (this.plumSettleDeposit) {
      pbActionCore.setPlumsettledeposit((0, _types.toActionPlumSettleDeposit)(this.plumSettleDeposit));
    } else if (this.plumTransfer) {
      pbActionCore.setPlumtransfer((0, _types.toActionPlumTransfer)(this.plumTransfer));
    } else if (this.depositToRewardingFund) {
      pbActionCore.setDeposittorewardingfund((0, _types.toActionDepositToRewardingFund)(this.depositToRewardingFund));
    } else if (this.claimFromRewardingFund) {
      pbActionCore.setClaimfromrewardingfund((0, _types.toActionClaimFromRewardingFund)(this.claimFromRewardingFund));
    } else if (this.grantReward) {
      pbActionCore.setGrantreward((0, _types.toActionGrantReward)(this.grantReward));
    }

    return pbActionCore;
  }

  bytestream() {
    return this.core().serializeBinary();
  }

  static deserialize(bytes) {
    const pbActionCore = _action_pb.default.ActionCore.deserializeBinary(bytes);

    const envelop = new Envelop(pbActionCore.getVersion(), String(pbActionCore.getNonce()), String(pbActionCore.getGaslimit()), pbActionCore.getGasprice());
    envelop.transfer = _types.GetActionsRequest.fromTransfer(pbActionCore.getTransfer());
    envelop.execution = _types.GetActionsRequest.fromExecution(pbActionCore.getExecution());
    envelop.claimFromRewardingFund = _types.GetActionsRequest.fromClaimFromRewardingFund(pbActionCore.getClaimfromrewardingfund()); // TODO(tian): add more fields

    return envelop;
  }

}

exports.Envelop = Envelop;

class SealedEnvelop {
  constructor(act, senderPubKey, signature) {
    _defineProperty(this, "act", void 0);

    _defineProperty(this, "senderPubKey", void 0);

    _defineProperty(this, "signature", void 0);

    this.act = act;
    this.senderPubKey = senderPubKey;
    this.signature = signature;
  }

  bytestream() {
    const pbActionCore = this.act.core();
    const pbAction = new _action_pb.default.Action();
    pbAction.setCore(pbActionCore);
    pbAction.setSenderpubkey(this.senderPubKey);
    pbAction.setSignature(this.signature);
    return pbAction.serializeBinary();
  }

  hash() {
    return Buffer.from((0, _hash.hash256b)(this.bytestream())).toString("hex");
  }

  action() {
    const gasLimit = this.act.gasLimit || "0";
    const gasPrice = this.act.gasPrice || "0";
    return {
      core: {
        version: this.act.version,
        nonce: this.act.nonce,
        gasLimit: gasLimit,
        gasPrice: gasPrice,
        transfer: this.act.transfer,
        execution: this.act.execution,
        startSubChain: this.act.startSubChain,
        stopSubChain: this.act.stopSubChain,
        putBlock: this.act.putBlock,
        createDeposit: this.act.createDeposit,
        settleDeposit: this.act.settleDeposit,
        createPlumChain: this.act.createPlumChain,
        terminatePlumChain: this.act.terminatePlumChain,
        plumPutBlock: this.act.plumPutBlock,
        plumCreateDeposit: this.act.plumCreateDeposit,
        plumStartExit: this.act.plumStartExit,
        plumChallengeExit: this.act.plumChallengeExit,
        plumResponseChallengeExit: this.act.plumResponseChallengeExit,
        plumFinalizeExit: this.act.plumFinalizeExit,
        plumSettleDeposit: this.act.plumSettleDeposit,
        plumTransfer: this.act.plumTransfer,
        depositToRewardingFund: this.act.depositToRewardingFund,
        claimFromRewardingFund: this.act.claimFromRewardingFund,
        grantReward: this.act.grantReward,
        putPollResult: this.act.putPollResult
      },
      senderPubKey: this.senderPubKey,
      signature: this.signature
    };
  }

  static sign(privateKey, publicKey, act) {
    const h = (0, _hash.hash256b)(act.bytestream());
    const sign = Buffer.from((0, _crypto.makeSigner)(0)(h.toString("hex"), privateKey), "hex");
    return new SealedEnvelop(act, Buffer.from(publicKey, "hex"), sign);
  }

}

exports.SealedEnvelop = SealedEnvelop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,