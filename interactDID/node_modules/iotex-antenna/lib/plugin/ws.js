"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WsSignerPlugin = void 0;

var _window = _interopRequireDefault(require("global/window"));

var _isomorphicWs = _interopRequireDefault(require("isomorphic-ws"));

var _account = require("../account/account");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// tslint:disable-next-line:insecure-random
let reqId = Math.round(Math.random() * 10000);

class WsSignerPlugin {
  constructor(provider = "wss://local.get-scatter.com:64102", options = {
    retryCount: 3,
    retryDuration: 50
  }) {
    _defineProperty(this, "ws", void 0);

    _defineProperty(this, "provider", void 0);

    _defineProperty(this, "options", void 0);

    this.provider = provider;
    this.options = options;
    this.init();
  }

  init() {
    this.ws = new _isomorphicWs.default(this.provider);

    this.ws.onopen = () => {
      _window.default.console.log("[antenna-ws] connected");
    };

    this.ws.onclose = () => {
      _window.default.console.log("[antenna-ws] disconnected");
    };
  }

  send(req) {
    const readyState = this.ws.readyState;

    if (readyState === 1) {
      this.ws.send(JSON.stringify(req));
    } else {
      if (readyState === 2 || readyState === 3) {
        this.init();
      }

      this.reconnectAndSend(this.options.retryCount, req);
    }
  }

  reconnectAndSend(retryCount, req, timeoutId) {
    const readyState = this.ws.readyState;

    if (timeoutId) {
      _window.default.clearTimeout(timeoutId);
    }

    if (retryCount > 0) {
      const id = _window.default.setTimeout(() => {
        if (readyState === 1) {
          this.ws.send(JSON.stringify(req));

          _window.default.clearTimeout(id);
        } else {
          const count = retryCount - 1;
          this.reconnectAndSend(count, req, id);
        }
      }, this.options.retryDuration);
    } else {
      _window.default.console.error("ws plugin connect error, please retry again later.");
    }
  }

  async signAndSend(envelop) {
    const id = reqId++;
    const req = {
      reqId: id,
      envelop: Buffer.from(envelop.bytestream()).toString("hex"),
      type: "SIGN_AND_SEND",
      origin: this.getOrigin()
    };
    this.send(req); // tslint:disable-next-line:promise-must-complete

    return new Promise(resolve => {
      this.ws.onmessage = event => {
        let resp = {
          reqId: -1,
          actionHash: ""
        };

        try {
          if (typeof event.data === "string") {
            resp = JSON.parse(event.data);
          }
        } catch (_) {
          return;
        }

        if (resp.reqId === id) {
          resolve(resp.actionHash);
        }
      };
    });
  }

  async getAccount(address) {
    const acct = new _account.Account();
    acct.address = address;
    return acct;
  }

  async getAccounts() {
    const id = reqId++;
    const req = {
      reqId: id,
      type: "GET_ACCOUNTS"
    };
    this.send(req); // tslint:disable-next-line:promise-must-complete

    return new Promise(resolve => {
      this.ws.onmessage = event => {
        let resp = {
          reqId: -1,
          accounts: []
        };

        try {
          if (typeof event.data === "string") {
            resp = JSON.parse(event.data);
          }
        } catch (_) {
          return;
        }

        if (resp.reqId === id) {
          resolve(resp.accounts);
        }
      };
    });
  }

  getOrigin(plugin = "") {
    let origin = "";

    if (location !== undefined && location.hasOwnProperty("hostname") && location.hostname.length) {
      origin = location.hostname;
    } else {
      origin = plugin;
    }

    if (origin.substr(0, 4) === "www.") {
      origin = origin.replace("www.", "");
    }

    return origin;
  }

}

exports.WsSignerPlugin = WsSignerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,