"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAbiFunctions = getAbiFunctions;
exports.getArgTypes = getArgTypes;
exports.getHeaderHash = getHeaderHash;
exports.encodeArguments = encodeArguments;
exports.encodeInputData = encodeInputData;
exports.Constructor = void 0;

var _ethereumjsAbi = _interopRequireDefault(require("ethereumjs-abi"));

var address = _interopRequireWildcard(require("../crypto/address"));

var _hash = require("../crypto/hash");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* tslint:disable:no-any */
function getAbiFunctions(abi) {
  const abiFunctions = {};
  abi.forEach(f => {
    if (f.type === "function") {
      abiFunctions[f.name] = f;
    }

    if (f.type === "constructor") {
      abiFunctions[Constructor] = f;
    }
  });
  return abiFunctions;
}

function getArgTypes(fnAbi) {
  const args = [];
  fnAbi.inputs.forEach(field => {
    args.push({
      name: field.name,
      type: field.type
    });
  });
  return args;
}

function getHeaderHash(fnAbi, args) {
  const inputs = args.map(i => {
    return i.type;
  });
  const signature = `${fnAbi.name}(${inputs.join(",")})`;
  const keccak256 = (0, _hash.hash256b)(signature).toString("hex");
  return keccak256.slice(0, 8);
}

function encodeArguments(args, userInput) {
  const types = [];
  const values = [];
  (args || []).forEach((arg, index) => {
    let name = arg.name;

    if (name === "") {
      name = `arg${index}`;
    }

    if (arg.type === "bool") {
      types.push("uint256");
    } else {
      types.push(arg.type);
    }

    if (userInput.hasOwnProperty(name)) {
      let value = userInput[name];

      if (arg.type === "address") {
        value = address.fromString(value).stringEth();
      }

      if (arg.type === "address[]") {
        for (let i = 0; i < value.length; i++) {
          value[i] = address.fromString(value[i]).stringEth();
        }
      }

      values.push(value);
    } else {
      values.push("");
    }
  });

  try {
    const encoded = _ethereumjsAbi.default.rawEncode(types, values);

    return encoded.toString("hex");
  } catch (e) {
    throw new Error(`failed to rawEncode: ${e.stack}, types: ${types}, values: ${values}`);
  }
}

const Constructor = "constructor";
exports.Constructor = Constructor;

function encodeInputData(abiByFunc, fnName, userInput) {
  const fnAbi = abiByFunc[fnName];
  const args = getArgTypes(fnAbi);
  const header = getHeaderHash(fnAbi, args);
  const encodedArgs = encodeArguments(args, userInput);
  return `${header}${encodedArgs}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9hYmktdG8tYnl0ZS50cyJdLCJuYW1lcyI6WyJnZXRBYmlGdW5jdGlvbnMiLCJhYmkiLCJhYmlGdW5jdGlvbnMiLCJmb3JFYWNoIiwiZiIsInR5cGUiLCJuYW1lIiwiQ29uc3RydWN0b3IiLCJnZXRBcmdUeXBlcyIsImZuQWJpIiwiYXJncyIsImlucHV0cyIsImZpZWxkIiwicHVzaCIsImdldEhlYWRlckhhc2giLCJtYXAiLCJpIiwic2lnbmF0dXJlIiwiam9pbiIsImtlY2NhazI1NiIsInRvU3RyaW5nIiwic2xpY2UiLCJlbmNvZGVBcmd1bWVudHMiLCJ1c2VySW5wdXQiLCJ0eXBlcyIsInZhbHVlcyIsImFyZyIsImluZGV4IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsImFkZHJlc3MiLCJmcm9tU3RyaW5nIiwic3RyaW5nRXRoIiwibGVuZ3RoIiwiZW5jb2RlZCIsImV0aGVyZXVtanMiLCJyYXdFbmNvZGUiLCJlIiwiRXJyb3IiLCJzdGFjayIsImVuY29kZUlucHV0RGF0YSIsImFiaUJ5RnVuYyIsImZuTmFtZSIsImhlYWRlciIsImVuY29kZWRBcmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBSEE7QUFVTyxTQUFTQSxlQUFULENBQXlCQyxHQUF6QixFQUFxRDtBQUMxRCxRQUFNQyxZQUFZLEdBQUksRUFBdEI7QUFDQUQsRUFBQUEsR0FBRyxDQUFDRSxPQUFKLENBQVlDLENBQUMsSUFBSTtBQUNmLFFBQUlBLENBQUMsQ0FBQ0MsSUFBRixLQUFXLFVBQWYsRUFBMkI7QUFDekJILE1BQUFBLFlBQVksQ0FBQ0UsQ0FBQyxDQUFDRSxJQUFILENBQVosR0FBdUJGLENBQXZCO0FBQ0Q7O0FBQ0QsUUFBSUEsQ0FBQyxDQUFDQyxJQUFGLEtBQVcsYUFBZixFQUE4QjtBQUM1QkgsTUFBQUEsWUFBWSxDQUFDSyxXQUFELENBQVosR0FBNEJILENBQTVCO0FBQ0Q7QUFDRixHQVBEO0FB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RCxHQUhELENBR0UsT0FBT2lCLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUNILHdCQUF1QkQsQ0FBQyxDQUFDRSxLQUFNLFlBQVdmLEtBQU0sYUFBWUMsTUFBTyxFQURoRSxDQUFOO0FBR0Q7QUFDRjs7QUFFTSxNQUFNbEIsV0FBVyxHQUFHLGFBQXBCOzs7QUFNQSxTQUFTaUMsZUFBVCxDQUNMQyxTQURLLEVBRUxDLE1BRkssRUFHTG5CLFNBSEssRUFJRztBQUNSLFFBQU1kLEtBQUssR0FBR2dDLFNBQVMsQ0FBQ0MsTUFBRCxDQUF2QjtBQUNBLFFBQU1oQyxJQUFJLEdBQUdGLFdBQVcsQ0FBQ0MsS0FBRCxDQUF4QjtBQUNBLFFBQU1rQyxNQUFNLEdBQUc3QixhQUFhLENBQUNMLEtBQUQsRUFBUUMsSUFBUixDQUE1QjtBQUNBLFFBQU1rQyxXQUFXLEdBQUd0QixlQUFlLENBQUNaLElBQUQsRUFBT2EsU0FBUCxDQUFuQztBQUNBLFNBQVEsR0FBRW9CLE1BQU8sR0FBRUMsV0FBWSxFQUEvQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tYW55ICovXG5pbXBvcnQgZXRoZXJldW1qcyBmcm9tIFwiZXRoZXJldW1qcy1hYmlcIjtcbmltcG9ydCAqIGFzIGFkZHJlc3MgZnJvbSBcIi4uL2NyeXB0by9hZGRyZXNzXCI7XG5pbXBvcnQgeyBoYXNoMjU2YiB9IGZyb20gXCIuLi9jcnlwdG8vaGFzaFwiO1xuaW1wb3J0IHsgRXRoQWJpRGVjb2RlUGFyYW1ldGVyc1R5cGUgfSBmcm9tIFwiLi9hYmlcIjtcblxuZXhwb3J0IHR5cGUgQWJpQnlGdW5jID0ge1xuICBbZnVuYzogc3RyaW5nXTogYW55O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFiaUZ1bmN0aW9ucyhhYmk6IEFycmF5PGFueT4pOiBBYmlCeUZ1bmMge1xuICBjb25zdCBhYmlGdW5jdGlvbnMgPSAoe30gYXMgYW55KSBhcyBBYmlCeUZ1bmM7XG4gIGFiaS5mb3JFYWNoKGYgPT4ge1xuICAgIGlmIChmLnR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgYWJpRnVuY3Rpb25zW2YubmFtZV0gPSBmO1xuICAgIH1cbiAgICBpZiAoZi50eXBlID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgIGFiaUZ1bmN0aW9uc1tDb25zdHJ1Y3Rvcl0gPSBmO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFiaUZ1bmN0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFyZ1R5cGVzKGZuQWJpOiB7XG4gIGlucHV0czogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IHR5cGU6IHN0cmluZyB9Pjtcbn0pOiBBcnJheTxFdGhBYmlEZWNvZGVQYXJhbWV0ZXJzVHlwZT4ge1xuICBjb25zdCBhcmdzID0gW10gYXMgQXJyYXk8RXRoQWJpRGVjb2RlUGFyYW1ldGVyc1R5cGU+O1xuICBmbkFiaS5pbnB1dHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgYXJncy5wdXNoKHsgbmFtZTogZmllbGQubmFtZSwgdHlwZTogZmllbGQudHlwZSB9KTtcbiAgfSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGVhZGVySGFzaChcbiAgZm5BYmk6IGFueSxcbiAgYXJnczogQXJyYXk8RXRoQWJpRGVjb2RlUGFyYW1ldGVyc1R5cGU+XG4pOiBzdHJpbmcge1xuICBjb25zdCBpbnB1dHMgPSBhcmdzLm1hcChpID0+IHtcbiAgICByZXR1cm4gaS50eXBlO1xuICB9KTtcbiAgY29uc3Qgc2lnbmF0dXJlID0gYCR7Zm5BYmkubmFtZX0oJHtpbnB1dHMuam9pbihcIixcIil9KWA7XG4gIGNvbnN0IGtlY2NhazI1NiA9IGhhc2gyNTZiKHNpZ25hdHVyZSkudG9TdHJpbmcoXCJoZXhcIik7XG4gIHJldHVybiBrZWNjYWsyNTYuc2xpY2UoMCwgOCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVBcmd1bWVudHMoXG4gIGFyZ3M6IEFycmF5PEV0aEFiaURlY29kZVBhcmFtZXRlcnNUeXBlPixcbiAgdXNlcklucHV0OiBVc2VySW5wdXRcbik6IHN0cmluZyB7XG4gIGNvbnN0IHR5cGVzID0gW10gYXMgQXJyYXk8YW55PjtcbiAgY29uc3QgdmFsdWVzID0gW10gYXMgQXJyYXk8YW55PjtcblxuICAoYXJncyB8fCBbXSkuZm9yRWFjaCgoYXJnLCBpbmRleCkgPT4ge1xuICAgIGxldCBuYW1lID0gYXJnLm5hbWU7XG4gICAgaWYgKG5hbWUgPT09IFwiXCIpIHtcbiAgICAgIG5hbWUgPSBgYXJnJHtpbmRleH1gO1xuICAgIH1cbiAgICBpZiAoYXJnLnR5cGUgPT09IFwiYm9vbFwiKSB7XG4gICAgICB0eXBlcy5wdXNoKFwidWludDI1NlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZXMucHVzaChhcmcudHlwZSk7XG4gICAgfVxuICAgIGlmICh1c2VySW5wdXQuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHVzZXJJbnB1dFtuYW1lXTtcbiAgICAgIGlmIChhcmcudHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgdmFsdWUgPSBhZGRyZXNzLmZyb21TdHJpbmcodmFsdWUpLnN0cmluZ0V0aCgpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZy50eXBlID09PSBcImFkZHJlc3NbXVwiKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YWx1ZVtpXSA9IGFkZHJlc3MuZnJvbVN0cmluZyh2YWx1ZVtpXSkuc3RyaW5nRXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzLnB1c2goXCJcIik7XG4gICAgfVxuICB9KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBlbmNvZGVkID0gZXRoZXJldW1qcy5yYXdFbmNvZGUodHlwZXMsIHZhbHVlcyk7XG4gICAgcmV0dXJuIGVuY29kZWQudG9TdHJpbmcoXCJoZXhcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgZmFpbGVkIHRvIHJhd0VuY29kZTogJHtlLnN0YWNrfSwgdHlwZXM6ICR7dHlwZXN9LCB2YWx1ZXM6ICR7dmFsdWVzfWBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb25zdHJ1Y3RvciA9IFwiY29uc3RydWN0b3JcIjtcblxudHlwZSBVc2VySW5wdXQgPSB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVJbnB1dERhdGEoXG4gIGFiaUJ5RnVuYzogQWJpQnlGdW5jLFxuICBmbk5hbWU6IHN0cmluZyxcbiAgdXNlcklucHV0OiBVc2VySW5wdXRcbik6IHN0cmluZyB7XG4gIGNvbnN0IGZuQWJpID0gYWJpQnlGdW5jW2ZuTmFtZV07XG4gIGNvbnN0IGFyZ3MgPSBnZXRBcmdUeXBlcyhmbkFiaSk7XG4gIGNvbnN0IGhlYWRlciA9IGdldEhlYWRlckhhc2goZm5BYmksIGFyZ3MpO1xuICBjb25zdCBlbmNvZGVkQXJncyA9IGVuY29kZUFyZ3VtZW50cyhhcmdzLCB1c2VySW5wdXQpO1xuICByZXR1cm4gYCR7aGVhZGVyfSR7ZW5jb2RlZEFyZ3N9YDtcbn1cbiJdfQ==