"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var protoLoader = _interopRequireWildcard(require("@grpc/proto-loader"));

var _grpc = _interopRequireDefault(require("grpc"));

var _util = require("util");

var _rootCerts = require("./root-certs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const packageDefinition = protoLoader.loadSync(`${__dirname}/../../proto/api/api.proto`, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
  includeDirs: [`${__dirname}/../../`]
});

const iotexapi = _grpc.default.loadPackageDefinition(packageDefinition).iotexapi;

class RpcMethod {
  constructor(hostname, options = {}) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "timeout", void 0);

    _defineProperty(this, "credentials", void 0);

    const normalizedHostname = String(hostname).replace(/^(http:\/\/|https:\/\/)/, "");

    if (hostname.startsWith("https://")) {
      options.enableSsl = true;
    }

    this.credentials = options && options.enableSsl ? _grpc.default.credentials.createSsl(Buffer.from(_rootCerts.ROOT_CERTS)) : _grpc.default.credentials.createInsecure(); // @ts-ignore

    this.client = new iotexapi.APIService(normalizedHostname, this.credentials, null);
    this.timeout = options.timeout || 300000;
  }

  setProvider(provider) {
    if (typeof provider === "string") {
      const normalizedHostname = String(provider).replace(/^(http:\/\/|https:\/\/)/, "");
      this.credentials = provider.startsWith("https://") ? _grpc.default.credentials.createSsl(Buffer.from(_rootCerts.ROOT_CERTS)) : _grpc.default.credentials.createInsecure(); // @ts-ignore

      this.client = new iotexapi.APIService(normalizedHostname, this.credentials, null);
    } else {
      const origin = provider;
      this.client = origin.client;
    }
  }

  getDeadline() {
    return new Date(Date.now() + this.timeout);
  }

  async getAccount(req) {
    const getAccount = (0, _util.promisify)(this.client.getAccount.bind(this.client)); // @ts-ignore

    return getAccount(req, {
      deadline: this.getDeadline()
    });
  }

  async getBlockMetas(req) {
    const getBlockMetas = (0, _util.promisify)(this.client.getBlockMetas.bind(this.client)); // @ts-ignore

    return getBlockMetas(req, {
      deadline: this.getDeadline()
    });
  }

  async getChainMeta(req) {
    const getChainMeta = (0, _util.promisify)(this.client.getChainMeta.bind(this.client)); // @ts-ignore

    return getChainMeta(req, {
      deadline: this.getDeadline()
    });
  }

  async getServerMeta(req) {
    const getServerMeta = (0, _util.promisify)(this.client.getServerMeta.bind(this.client)); // @ts-ignore

    return getServerMeta(req, {
      deadline: this.getDeadline()
    });
  }

  async getActions(req) {
    const getActions = (0, _util.promisify)(this.client.getActions.bind(this.client)); // @ts-ignore

    return getActions(req, {
      deadline: this.getDeadline()
    });
  }

  async suggestGasPrice(req) {
    const suggestGasPrice = (0, _util.promisify)(this.client.suggestGasPrice.bind(this.client)); // @ts-ignore

    return suggestGasPrice(req, {
      deadline: this.getDeadline()
    });
  }

  async getReceiptByAction(req) {
    const getReceiptByAction = (0, _util.promisify)(this.client.getReceiptByAction.bind(this.client)); // @ts-ignore

    return getReceiptByAction(req, {
      deadline: this.getDeadline()
    });
  }

  async readContract(req) {
    const readContract = (0, _util.promisify)(this.client.readContract.bind(this.client)); // @ts-ignore

    return readContract(req, {
      deadline: this.getDeadline()
    });
  }

  async sendAction(req) {
    const sendAction = (0, _util.promisify)(this.client.sendAction.bind(this.client)); // @ts-ignore

    return sendAction(req, {
      deadline: this.getDeadline()
    });
  }

  async estimateGasForAction(req) {
    const estimateGasForAction = (0, _util.promisify)(this.client.estimateGasForAction.bind(this.client)); // @ts-ignore

    return estimateGasForAction(req, {
      deadline: this.getDeadline()
    });
  }

  async readState(req) {
    const readState = (0, _util.promisify)(this.client.readState.bind(this.client)); // @ts-ignore

    return readState(req, {
      deadline: this.getDeadline()
    });
  }

  async getEpochMeta(req) {
    const getEpochMeta = (0, _util.promisify)(this.client.getEpochMeta.bind(this.client)); // @ts-ignore

    return getEpochMeta(req, {
      deadline: this.getDeadline()
    });
  }

  async getLogs(req) {
    const getLogs = (0, _util.promisify)(this.client.getLogs.bind(this.client)); // @ts-ignore

    return getLogs(req, {
      deadline: this.getDeadline()
    });
  }

  async estimateActionGasConsumption(req) {
    const estimateActionGasConsumption = (0, _util.promisify)(this.client.estimateActionGasConsumption.bind(this.client)); // @ts-ignore

    return estimateActionGasConsumption(req, {
      deadline: this.getDeadline()
    });
  }

  streamBlocks(req) {
    // @ts-ignore
    return this.client.streamBlocks(req, {
      deadline: this.getDeadline()
    });
  }

  streamLogs(req) {
    // @ts-ignore
    return this.client.streamLogs(req, {
      deadline: this.getDeadline()
    });
  }

}

exports.default = RpcMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,