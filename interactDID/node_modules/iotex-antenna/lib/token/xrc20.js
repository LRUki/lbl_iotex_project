"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XRC20 = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _ethereumjsAbi = _interopRequireDefault(require("ethereumjs-abi"));

var _abiToByte = require("../contract/abi-to-byte");

var _contract = require("../contract/contract");

var _address = require("../crypto/address");

var _abi = require("./abi");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class XRC20 {
  constructor(address, options) {
    _defineProperty(this, "address", void 0);

    _defineProperty(this, "contract", void 0);

    _defineProperty(this, "methods", void 0);

    _defineProperty(this, "tokenName", void 0);

    _defineProperty(this, "tokenSymbol", void 0);

    _defineProperty(this, "tokenDecimals", void 0);

    _defineProperty(this, "tokenTotalSupply", void 0);

    this.address = address;
    this.contract = new _contract.Contract(_abi.XRC20_ABI, address, options);
    const methods = {}; // @ts-ignore

    for (const fnName of Object.keys(this.contract.getABI())) {
      // @ts-ignore
      const fnAbi = this.contract.getABI()[fnName];

      if (fnAbi.type === "constructor") {
        continue;
      }

      const args = (0, _abiToByte.getArgTypes)(fnAbi);
      const header = (0, _abiToByte.getHeaderHash)(fnAbi, args); // @ts-ignore

      methods[header] = {
        name: fnName,
        inputsNames: args.map(i => {
          return `${i.name}`;
        }),
        inputsTypes: args.map(i => {
          return `${i.type}`;
        })
      };
    }

    this.methods = methods;
  }

  async name() {
    if (this.tokenName) {
      return this.tokenName;
    }

    const result = await this.readMethod("name", this.address);

    const data = _ethereumjsAbi.default.rawDecode(["string"], Buffer.from(result, "hex"));

    if (data.length > 0) {
      this.tokenName = data[0];
      return this.tokenName;
    }

    return "";
  }

  async symbol() {
    if (this.tokenSymbol) {
      return this.tokenSymbol;
    }

    const result = await this.readMethod("symbol", this.address);

    const data = _ethereumjsAbi.default.rawDecode(["string"], Buffer.from(result, "hex"));

    if (data.length > 0) {
      this.tokenSymbol = data[0];
      return this.tokenSymbol;
    }

    return "";
  }

  async decimals() {
    if (this.tokenDecimals) {
      return this.tokenDecimals;
    }

    const result = await this.readMethod("decimals", this.address);
    this.tokenDecimals = new _bignumber.default(result, 16);
    return this.tokenDecimals;
  }

  async totalSupply() {
    if (this.tokenTotalSupply) {
      return this.tokenTotalSupply;
    }

    const result = await this.readMethod("totalSupply", this.address);
    this.tokenTotalSupply = new _bignumber.default(result, 16);
    return this.tokenTotalSupply;
  }

  async balanceOf(owner) {
    const result = await this.readMethod("balanceOf", this.address, owner);
    return new _bignumber.default(result, 16);
  }

  async transfer(to, value, options) {
    return this.executeMethod("transfer", options.account, options.gasPrice, options.gasLimit, "0", to, value.toFixed(0));
  }

  async allowance(owner, spender, options) {
    return this.executeMethod("allowance", options.account, options.gasPrice, options.gasLimit, "0", owner, spender);
  }

  async approve(spender, value, options) {
    return this.executeMethod("approve", options.account, options.gasPrice, options.gasLimit, "0", spender, value.toFixed(0));
  }

  async transferFrom(from, to, value, options) {
    return this.executeMethod("transferFrom", options.account, options.gasPrice, options.gasLimit, "0", from, to, value.toFixed(0));
  }

  async readMethod(method, callerAddress, // @ts-ignore
  // tslint:disable-next-line: typedef
  ...args) {
    if (!this.contract.provider) {
      throw new Error("no rpc method provider specified");
    }

    const result = await this.contract.provider.readContract({
      execution: this.contract.pureEncodeMethod("0", method, ...args),
      callerAddress: callerAddress
    });
    return result.data;
  }

  executeMethod(method, account, gasPrice, gasLimit, amount, // @ts-ignore
  // tslint:disable-next-line: typedef
  ...args) {
    return this.contract.methods[method](...args, {
      account: account,
      amount: amount,
      gasLimit: gasLimit,
      gasPrice: gasPrice
    });
  }

  decode(data) {
    if (data.length < 8) {
      throw new Error("input data error");
    }

    const methodKey = data.substr(0, 8);
    const method = this.methods[methodKey];

    if (!method) {
      throw new Error(`method ${methodKey} is not erc20 method`);
    }

    const params = _ethereumjsAbi.default.rawDecode(method.inputsTypes, Buffer.from(data.substring(8), "hex"));

    const values = {};

    for (let i = 0; i < method.inputsTypes.length; i++) {
      if (method.inputsTypes[i] === "address") {
        params[i] = (0, _address.fromBytes)(Buffer.from(params[i].toString(), "hex")).string();
      } // @ts-ignore


      values[method.inputsNames[i]] = params[i];
    }

    return {
      method: method.name,
      data: values
    };
  }

}

exports.XRC20 = XRC20;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,