"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Account = void 0;

var _crypto = require("../crypto/crypto");

var _hash = require("../crypto/hash");

var _utils = require("./utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Account {
  constructor() {
    _defineProperty(this, "address", void 0);

    _defineProperty(this, "privateKey", void 0);

    _defineProperty(this, "publicKey", void 0);
  }

  static fromPrivateKey(privateKey) {
    if (privateKey === "") {
      throw new Error("private key can not empty.");
    }

    const obj = (0, _crypto.privateKeyToAccount)(privateKey);
    const act = new Account();
    act.address = obj.address;
    act.privateKey = obj.privateKey;
    act.publicKey = obj.publicKey;
    return act;
  }

  static fromAddress(address) {
    if (address === "" || address.length !== 41) {
      throw new Error("address illegal.");
    }

    const act = new Account();
    act.address = address;
    return act;
  }

  sign(data) {
    if (!this.privateKey) {
      throw new Error("account sign only support local model.");
    }

    const h = this.hashMessage(data);
    return Buffer.from((0, _crypto.makeSigner)(0)(h.toString("hex"), this.privateKey), "hex");
  }

  recover(message, signature, preFixed) {
    let bytes = message;

    if (!preFixed) {
      bytes = this.hashMessage(message);
    } // @ts-ignore


    return (0, _crypto.recover)(bytes, signature);
  }

  hashMessage(data) {
    let bytes = data;

    if (typeof data === "string" && (0, _utils.isHexStrict)(data)) {
      bytes = (0, _utils.hexToBytes)(data);
    } // @ts-ignore


    const messageBuffer = Buffer.from(bytes);
    const preamble = `\x16IoTeX Signed Message:\n${bytes.length}`;
    const preambleBuffer = Buffer.from(preamble);
    const iotexMessage = Buffer.concat([preambleBuffer, messageBuffer]);
    return (0, _hash.hash256b)(iotexMessage);
  }

}

exports.Account = Account;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50L2FjY291bnQudHMiXSwibmFtZXMiOlsiQWNjb3VudCIsImZyb21Qcml2YXRlS2V5IiwicHJpdmF0ZUtleSIsIkVycm9yIiwib2JqIiwiYWN0IiwiYWRkcmVzcyIsInB1YmxpY0tleSIsImZyb21BZGRyZXNzIiwibGVuZ3RoIiwic2lnbiIsImRhdGEiLCJoIiwiaGFzaE1lc3NhZ2UiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJyZWNvdmVyIiwibWVzc2FnZSIsInNpZ25hdHVyZSIsInByZUZpeGVkIiwiYnl0ZXMiLCJtZXNzYWdlQnVmZmVyIiwicHJlYW1ibGUiLCJwcmVhbWJsZUJ1ZmZlciIsImlvdGV4TWVzc2FnZSIsImNvbmNhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBWU8sTUFBTUEsT0FBTixDQUFrQztBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFBQTs7QUFLdkMsU0FBY0MsY0FBZCxDQUE2QkMsVUFBN0IsRUFBMkQ7QUFDekQsUUFBSUEsVUFBVSxLQUFLLEVBQW5CLEVBQXVCO0FBQ3JCLFlBQU0sSUFBSUMsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFDRCxVQUFNQyxHQUFHLEdBQUcsaUNBQW9CRixVQUFwQixDQUFaO0FBQ0EsVUFBTUcsR0FBRyxHQUFHLElBQUlMLE9BQUosRUFBWjtBQUNBSyxJQUFBQSxHQUFHLENBQUNDLE9BQUosR0FBY0YsR0FBRyxDQUFDRSxPQUFsQjtBQUNBRCxJQUFBQSxHQUFHLENBQUNILFVBQUosR0FBaUJFLEdBQUcsQ0FBQ0YsVUFBckI7QUFDQUcsSUFBQUEsR0FBRyxDQUFDRSxTQUFKLEdBQWdCSCxHQUFHLENBQUNHLFNBQXBCO0FBQ0EsV0FBT0YsR0FBUDtBQUNEOztBQUVELFNBQWNHLFdBQWQsQ0FBMEJGLE9BQTFCLEVBQXFEO0FBQ25ELFFBQUlBLE9BQU8sS0FBSyxFQUFaLElBQWtCQSxPQUFPLENBQUNHLE1BQVIsS0FBbUIsRUFBekMsRUFBNkM7QUFDM0MsWUFBTSxJQUFJTixLQUFKLENBQVUsa0JBQVYsQ0FBTjtBQUNEOztBQUNELFVBQU1FLEdBQUcsR0FBRyxJQUFJTCxPQUFKLEVBQVo7QUFDQUssSUFBQUEsR0FBRyxDQUFDQyxPQUFKLEdBQWNBLE9BQWQ7QUFDQSxXQUFPRCxHQUFQO0FBQ0Q7O0FBRU1LLEVBQUFBLElBQVAsQ0FBWUMsSUFBWixFQUF3RDtBQUN0RCxRQUFJLENBQUMsS0FBS1QsVUFBVixFQUFzQjtBQUNwQixZQUFNLElBQUlDLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7O0FBQ0QsVUFBTVMsQ0FBQyxHQUFHLEtBQUtDLFdBQUwsQ0FBaUJGLElBQWpCLENBQVY7QUFDQSxXQUFPRyxNQUFNLENBQUNDLElBQVAsQ0FDTCx3QkFBVyxDQUFYLEVBQWNILENBQUMsQ0FBQ0ksUUFBRixDQUFXLEtBQVgsQ0FBZCxFQUFpQyxLQUFLZCxVQUF0QyxDQURLLEVBRUwsS0FGSyxDQUFQO0FBSUQ7O0FBRU1lLEVBQUFBLE9BQVAsQ0FDRUMsT0FERixFQUVFQyxTQUZGLEVBR0VDLFFBSEYsRUFJVTtBQUNSLFFBQUlDLEtBQUssR0FBR0gsT0FBWjs7QUFDQSxRQUFJLENBQUNFLFFBQUwsRUFBZTtBQUNiQyxNQUFBQSxLQUFLLEdBQUcsS0FBS1IsV0FBTCxDQUFpQkssT0FBakIsQ0FBUjtBQUNELEtBSk8sQ0FLUjs7O0FBQ0EsV0FBTyxxQkFBUUcsS0FBUixFQUFlRixTQUFmLENBQVA7QUFDRDs7QUFFTU4sRUFBQUEsV0FBUCxDQUFtQkYsSUFBbkIsRUFBK0Q7QUFDN0QsUUFBSVUsS0FBSyxHQUFHVixJQUFaOztBQUNBLFFBQUksT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0Qix3QkFBWUEsSUFBWixDQUFoQyxFQUFtRDtBQUNqRFUsTUFBQUEsS0FBSyxHQUFHLHVCQUFXVixJQUFYLENBQVI7QUFDRCxLQUo0RCxDQU03RDs7O0FBQ0EsVUFBTVcsYUFBYSxHQUFHUixNQUFNLENBQUNDLElBQVAsQ0FBWU0sS0FBWixDQUF0QjtBQUNBLFVBQU1FLFFBQVEsR0FBSSw4QkFBNkJGLEtBQUssQ0FBQ1osTUFBTyxFQUE1RDtBQUNBLFVBQU1lLGNBQWMsR0FBR1YsTUFBTSxDQUFDQyxJQUFQLENBQVlRLFFBQVosQ0FBdkI7QUFDQSxVQUFNRSxZQUFZLEdBQUdYLE1BQU0sQ0FBQ1ksTUFBUCxDQUFjLENBQUNGLGNBQUQsRUFBaUJGLGFBQWpCLENBQWQsQ0FBckI7QUFDQSxXQUFPLG9CQUFTRyxZQUFULENBQVA7QUFDRDs7QUE5RHNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZVNpZ25lciwgcHJpdmF0ZUtleVRvQWNjb3VudCwgcmVjb3ZlciB9IGZyb20gXCIuLi9jcnlwdG8vY3J5cHRvXCI7XG5pbXBvcnQgeyBoYXNoMjU2YiB9IGZyb20gXCIuLi9jcnlwdG8vaGFzaFwiO1xuaW1wb3J0IHsgaGV4VG9CeXRlcywgaXNIZXhTdHJpY3QgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElBY2NvdW50IHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlS2V5OiBzdHJpbmc7XG4gIHB1YmxpY0tleTogc3RyaW5nO1xuXG4gIHNpZ24oZGF0YTogc3RyaW5nIHwgQnVmZmVyIHwgVWludDhBcnJheSk6IEJ1ZmZlcjtcbiAgcmVjb3ZlcihtZXNzYWdlOiBzdHJpbmcsIHNpZ25hdHVyZTogQnVmZmVyLCBwcmVGaXhlZDogYm9vbGVhbik6IFN0cmluZztcbiAgaGFzaE1lc3NhZ2UoZGF0YTogc3RyaW5nIHwgQnVmZmVyIHwgVWludDhBcnJheSk6IEJ1ZmZlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEFjY291bnQgaW1wbGVtZW50cyBJQWNjb3VudCB7XG4gIHB1YmxpYyBhZGRyZXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBwcml2YXRlS2V5OiBzdHJpbmc7XG4gIHB1YmxpYyBwdWJsaWNLZXk6IHN0cmluZztcblxuICBwdWJsaWMgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXk6IHN0cmluZyk6IElBY2NvdW50IHtcbiAgICBpZiAocHJpdmF0ZUtleSA9PT0gXCJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJpdmF0ZSBrZXkgY2FuIG5vdCBlbXB0eS5cIik7XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IHByaXZhdGVLZXlUb0FjY291bnQocHJpdmF0ZUtleSk7XG4gICAgY29uc3QgYWN0ID0gbmV3IEFjY291bnQoKTtcbiAgICBhY3QuYWRkcmVzcyA9IG9iai5hZGRyZXNzO1xuICAgIGFjdC5wcml2YXRlS2V5ID0gb2JqLnByaXZhdGVLZXk7XG4gICAgYWN0LnB1YmxpY0tleSA9IG9iai5wdWJsaWNLZXk7XG4gICAgcmV0dXJuIGFjdDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogSUFjY291bnQge1xuICAgIGlmIChhZGRyZXNzID09PSBcIlwiIHx8IGFkZHJlc3MubGVuZ3RoICE9PSA0MSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkcmVzcyBpbGxlZ2FsLlwiKTtcbiAgICB9XG4gICAgY29uc3QgYWN0ID0gbmV3IEFjY291bnQoKTtcbiAgICBhY3QuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgcmV0dXJuIGFjdDtcbiAgfVxuXG4gIHB1YmxpYyBzaWduKGRhdGE6IHN0cmluZyB8IEJ1ZmZlciB8IFVpbnQ4QXJyYXkpOiBCdWZmZXIge1xuICAgIGlmICghdGhpcy5wcml2YXRlS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhY2NvdW50IHNpZ24gb25seSBzdXBwb3J0IGxvY2FsIG1vZGVsLlwiKTtcbiAgICB9XG4gICAgY29uc3QgaCA9IHRoaXMuaGFzaE1lc3NhZ2UoZGF0YSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFxuICAgICAgbWFrZVNpZ25lcigwKShoLnRvU3RyaW5nKFwiaGV4XCIpLCB0aGlzLnByaXZhdGVLZXkpLFxuICAgICAgXCJoZXhcIlxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgcmVjb3ZlcihcbiAgICBtZXNzYWdlOiBzdHJpbmcgfCBCdWZmZXIgfCBVaW50OEFycmF5LFxuICAgIHNpZ25hdHVyZTogQnVmZmVyLFxuICAgIHByZUZpeGVkOiBib29sZWFuXG4gICk6IFN0cmluZyB7XG4gICAgbGV0IGJ5dGVzID0gbWVzc2FnZTtcbiAgICBpZiAoIXByZUZpeGVkKSB7XG4gICAgICBieXRlcyA9IHRoaXMuaGFzaE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gcmVjb3ZlcihieXRlcywgc2lnbmF0dXJlKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXNoTWVzc2FnZShkYXRhOiBzdHJpbmcgfCBCdWZmZXIgfCBVaW50OEFycmF5KTogQnVmZmVyIHtcbiAgICBsZXQgYnl0ZXMgPSBkYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBpc0hleFN0cmljdChkYXRhKSkge1xuICAgICAgYnl0ZXMgPSBoZXhUb0J5dGVzKGRhdGEpO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICAgIGNvbnN0IHByZWFtYmxlID0gYFxceDE2SW9UZVggU2lnbmVkIE1lc3NhZ2U6XFxuJHtieXRlcy5sZW5ndGh9YDtcbiAgICBjb25zdCBwcmVhbWJsZUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHByZWFtYmxlKTtcbiAgICBjb25zdCBpb3RleE1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFtwcmVhbWJsZUJ1ZmZlciwgbWVzc2FnZUJ1ZmZlcl0pO1xuICAgIHJldHVybiBoYXNoMjU2Yihpb3RleE1lc3NhZ2UpO1xuICB9XG59XG4iXX0=