"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accounts = void 0;

var _account = _interopRequireDefault(require("eth-lib/lib/account"));

var _account2 = require("./account");

var _wallet = _interopRequireDefault(require("./wallet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Accounts extends Array {
  constructor() {
    super();

    _defineProperty(this, "wallet", void 0);

    this.wallet = new _wallet.default();
    return new Proxy(this, {
      get: (target, name) => {
        // @ts-ignore
        if (target.wallet[name]) {
          // @ts-ignore
          return target.wallet[name];
        } // @ts-ignore


        return target[name];
      }
    });
  }

  create(entropy) {
    const acct = _account.default.create(entropy);

    const privateKey = acct.privateKey.substr(2);

    const realAccount = _account2.Account.fromPrivateKey(privateKey);

    this.wallet.add(realAccount);
    return realAccount;
  }

  privateKeyToAccount(privateKey) {
    const account = _account2.Account.fromPrivateKey(privateKey);

    this.wallet.add(account);
    return account;
  }

  addressToAccount(address) {
    const account = _account2.Account.fromAddress(address);

    this.wallet.add(account);
    return account;
  }

  addAccount(account) {
    this.wallet.add(account);
    return account;
  }

  getAccount(address) {
    // @ts-ignore
    return this.wallet[address];
  }

  removeAccount(address) {
    return this.wallet.remove(address);
  }

  sign(data, privateKey) {
    return _account2.Account.fromPrivateKey(privateKey).sign(data);
  }

}

exports.Accounts = Accounts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50L2FjY291bnRzLnRzIl0sIm5hbWVzIjpbIkFjY291bnRzIiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIndhbGxldCIsIldhbGxldCIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwibmFtZSIsImNyZWF0ZSIsImVudHJvcHkiLCJhY2N0IiwiYWNjb3VudCIsInByaXZhdGVLZXkiLCJzdWJzdHIiLCJyZWFsQWNjb3VudCIsIkFjY291bnQiLCJmcm9tUHJpdmF0ZUtleSIsImFkZCIsInByaXZhdGVLZXlUb0FjY291bnQiLCJhZGRyZXNzVG9BY2NvdW50IiwiYWRkcmVzcyIsImZyb21BZGRyZXNzIiwiYWRkQWNjb3VudCIsImdldEFjY291bnQiLCJyZW1vdmVBY2NvdW50IiwicmVtb3ZlIiwic2lnbiIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFFQTs7Ozs7O0FBRU8sTUFBTUEsUUFBTixTQUF1QkMsS0FBdkIsQ0FBdUM7QUFHNUNDLEVBQUFBLFdBQVcsR0FBRztBQUNaOztBQURZOztBQUdaLFNBQUtDLE1BQUwsR0FBYyxJQUFJQyxlQUFKLEVBQWQ7QUFFQSxXQUFPLElBQUlDLEtBQUosQ0FBVSxJQUFWLEVBQWdCO0FBQ3JCQyxNQUFBQSxHQUFHLEVBQUUsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEtBQW1DO0FBQ3RDO0FBQ0EsWUFBSUQsTUFBTSxDQUFDSixNQUFQLENBQWNLLElBQWQsQ0FBSixFQUF5QjtBQUN2QjtBQUNBLGlCQUFPRCxNQUFNLENBQUNKLE1BQVAsQ0FBY0ssSUFBZCxDQUFQO0FBQ0QsU0FMcUMsQ0FPdEM7OztBQUNBLGVBQU9ELE1BQU0sQ0FBQ0MsSUFBRCxDQUFiO0FBQ0Q7QUFWb0IsS0FBaEIsQ0FBUDtBQVlEOztBQUVNQyxFQUFBQSxNQUFQLENBQWNDLE9BQWQsRUFBMEM7QUFDeEMsVUFBTUMsSUFBSSxHQUFHQyxpQkFBUUgsTUFBUixDQUFlQyxPQUFmLENBQWI7O0FBQ0EsVUFBTUcsVUFBVSxHQUFHRixJQUFJLENBQUNFLFVBQUwsQ0FBZ0JDLE1BQWhCLENBQXVCLENBQXZCLENBQW5COztBQUNBLFVBQU1DLFdBQVcsR0FBR0Msa0JBQVFDLGNBQVIsQ0FBdUJKLFVBQXZCLENBQXBCOztBQUNBLFNBQUtWLE1BQUwsQ0FBWWUsR0FBWixDQUFnQkgsV0FBaEI7QUFDQSxXQUFPQSxXQUFQO0FBQ0Q7O0FBRU1JLEVBQUFBLG1CQUFQLENBQTJCTixVQUEzQixFQUF5RDtBQUN2RCxVQUFNRCxPQUFPLEdBQUdJLGtCQUFRQyxjQUFSLENBQXVCSixVQUF2QixDQUFoQjs7QUFDQSxTQUFLVixNQUFMLENBQVllLEdBQVosQ0FBZ0JOLE9BQWhCO0FBQ0EsV0FBT0EsT0FBUDtBQUNEOztBQUVNUSxFQUFBQSxnQkFBUCxDQUF3QkMsT0FBeEIsRUFBbUQ7QUFDakQsVUFBTVQsT0FBTyxHQUFHSSxrQkFBUU0sV0FBUixDQUFvQkQsT0FBcEIsQ0FBaEI7O0FBQ0EsU0FBS2xCLE1BQUwsQ0FBWWUsR0FBWixDQUFnQk4sT0FBaEI7QUFDQSxXQUFPQSxPQUFQO0FBQ0Q7O0FBRU1XLEVBQUFBLFVBQVAsQ0FBa0JYLE9BQWxCLEVBQThDO0FBQzVDLFNBQUtULE1BQUwsQ0FBWWUsR0FBWixDQUFnQk4sT0FBaEI7QUFDQSxXQUFPQSxPQUFQO0FBQ0Q7O0FBRU1ZLEVBQUFBLFVBQVAsQ0FBa0JILE9BQWxCLEVBQXlEO0FBQ3ZEO0FBQ0EsV0FBTyxLQUFLbEIsTUFBTCxDQUFZa0IsT0FBWixDQUFQO0FBQ0Q7O0FBRU1JLEVBQUFBLGFBQVAsQ0FBcUJKLE9BQXJCLEVBQTRDO0FBQzFDLFdBQU8sS0FBS2xCLE1BQUwsQ0FBWXVCLE1BQVosQ0FBbUJMLE9BQW5CLENBQVA7QUFDRDs7QUFFTU0sRUFBQUEsSUFBUCxDQUFZQyxJQUFaLEVBQWdEZixVQUFoRCxFQUE0RTtBQUMxRSxXQUFPRyxrQkFBUUMsY0FBUixDQUF1QkosVUFBdkIsRUFBbUNjLElBQW5DLENBQXdDQyxJQUF4QyxDQUFQO0FBQ0Q7O0FBMUQyQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLWFueSAqL1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGFjY291bnQgZnJvbSBcImV0aC1saWIvbGliL2FjY291bnRcIjtcblxuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gXCIuL2FjY291bnRcIjtcbmltcG9ydCB7IElBY2NvdW50IH0gZnJvbSBcIi4vYWNjb3VudFwiO1xuaW1wb3J0IFdhbGxldCBmcm9tIFwiLi93YWxsZXRcIjtcblxuZXhwb3J0IGNsYXNzIEFjY291bnRzIGV4dGVuZHMgQXJyYXk8SUFjY291bnQ+IHtcbiAgcHJpdmF0ZSByZWFkb25seSB3YWxsZXQ6IFdhbGxldDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy53YWxsZXQgPSBuZXcgV2FsbGV0KCk7XG5cbiAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgIGdldDogKHRhcmdldCwgbmFtZTogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHRhcmdldC53YWxsZXRbbmFtZV0pIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgcmV0dXJuIHRhcmdldC53YWxsZXRbbmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiB0YXJnZXRbbmFtZV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlKGVudHJvcHk/OiBzdHJpbmcpOiBJQWNjb3VudCB7XG4gICAgY29uc3QgYWNjdCA9IGFjY291bnQuY3JlYXRlKGVudHJvcHkpO1xuICAgIGNvbnN0IHByaXZhdGVLZXkgPSBhY2N0LnByaXZhdGVLZXkuc3Vic3RyKDIpO1xuICAgIGNvbnN0IHJlYWxBY2NvdW50ID0gQWNjb3VudC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbiAgICB0aGlzLndhbGxldC5hZGQocmVhbEFjY291bnQpO1xuICAgIHJldHVybiByZWFsQWNjb3VudDtcbiAgfVxuXG4gIHB1YmxpYyBwcml2YXRlS2V5VG9BY2NvdW50KHByaXZhdGVLZXk6IHN0cmluZyk6IElBY2NvdW50IHtcbiAgICBjb25zdCBhY2NvdW50ID0gQWNjb3VudC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbiAgICB0aGlzLndhbGxldC5hZGQoYWNjb3VudCk7XG4gICAgcmV0dXJuIGFjY291bnQ7XG4gIH1cblxuICBwdWJsaWMgYWRkcmVzc1RvQWNjb3VudChhZGRyZXNzOiBzdHJpbmcpOiBJQWNjb3VudCB7XG4gICAgY29uc3QgYWNjb3VudCA9IEFjY291bnQuZnJvbUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgdGhpcy53YWxsZXQuYWRkKGFjY291bnQpO1xuICAgIHJldHVybiBhY2NvdW50O1xuICB9XG5cbiAgcHVibGljIGFkZEFjY291bnQoYWNjb3VudDogQWNjb3VudCk6IElBY2NvdW50IHtcbiAgICB0aGlzLndhbGxldC5hZGQoYWNjb3VudCk7XG4gICAgcmV0dXJuIGFjY291bnQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWNjb3VudChhZGRyZXNzOiBzdHJpbmcpOiBJQWNjb3VudCB8IHVuZGVmaW5lZCB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLndhbGxldFthZGRyZXNzXTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVBY2NvdW50KGFkZHJlc3M6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLndhbGxldC5yZW1vdmUoYWRkcmVzcyk7XG4gIH1cblxuICBwdWJsaWMgc2lnbihkYXRhOiBzdHJpbmcgfCBCdWZmZXIgfCBVaW50OEFycmF5LCBwcml2YXRlS2V5OiBzdHJpbmcpOiBCdWZmZXIge1xuICAgIHJldHVybiBBY2NvdW50LmZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpLnNpZ24oZGF0YSk7XG4gIH1cbn1cbiJdfQ==